# Snakefile

configfile: "./config.yaml"

rule all:
    input:
        "results/embeddings/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/blca_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/brca_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/coad_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/luad_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/stad_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/thca_embeddings.csv",
        "results/embeddings/mutation_embeddings.csv"


# Rule for the first download step with a credentials file path
rule download_step1:
    output:
        protected("data/rna/BLCA/data.csv")
    shell:
        "python ./src/data_preparation/0_01_download_rna_data.py --cancer BLCA --credentials {config[credentials_file]} > {output}"

rule download_step2:
    output:
        protected("data/rna/COAD/data.csv")
    shell:
        "python ./src/data_preparation/0_01_download_rna_data.py --cancer COAD --credentials {config[credentials_file]} > {output}"

rule download_step3:
    output:
        protected("data/rna/LUAD/data.csv")
    shell:
        "python ./src/data_preparation/0_01_download_rna_data.py --cancer LUAD --credentials {config[credentials_file]} > {output}"

rule download_step4:
    output:
        protected("data/rna/STAD/data.csv")
    shell:
        "python ./src/data_preparation/0_01_download_rna_data.py --cancer STAD --credentials {config[credentials_file]} > {output}"

rule download_step5:
    output:
        protected("data/rna/BRCA/data.csv")
    shell:
        "python ./src/data_preparation/0_01_download_rna_data.py --cancer BRCA --credentials {config[credentials_file]} > {output}"

rule download_mutations_data:
    output:
        "data/mutations/mutations.csv"
    shell:
        "python ./src/data_preparation/0_05_download_mutations.py --credentials {config[credentials_file]} > {output}"


rule create_rna_embeddings:
    input:
        "data/rna/BLCA/data.csv",
        "data/rna/COAD/data.csv",
        "data/rna/LUAD/data.csv",
        "data/rna/STAD/data.csv",
        "data/rna/BRCA/data.csv"
    output:
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/blca_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/brca_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/coad_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/luad_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/stad_embeddings.csv",
        "results/embeddings/rna/BRCA_LUAD_STAD_BLCA_COAD_THCA/thca_embeddings.csv"
    shell:
        "python ./src/data_preparation/0_04_create_rna_embeddings.py -c BRCA LUAD STAD BLCA COAD THCA"


rule create_mutation_embeddings:
    input:
        "data/mutations/mutations.csv"
    output:
        "results/embeddings/mutation_embeddings.csv"
    shell:
        "python ./src/data_preparation/0_13_create_mutation_embeddings.py -d data/mutations/mutations.csv > {output}"


rule download_case_manifest:
    output:
        "data/annotations/case_manifest.json"
    shell:
        "python ./src/data_preparation/0_03_download_case_manifest.py -d data/annotations/ > {output}"

rule download_annotations:
    input:
        "data/annotations/case_manifest.json"
    output:
        "data/annotations/download_complete.txt"
    shell:
        "python ./src/data_preparation/0_02_download_annotations.py -d data/annotations/ > {output}"

rule extract_text_from_pdf_annotations_1:
    input:
        "data/annotations/case_manifest.json",
        "data/annotations/download_complete.txt"
    output:
        "data/annotations/extracted_text_success.txt"
    shell:
        "./src/data_preparation/0_07_extract_text_from_pdf.sh > {output}"


rule combine_annotations_1:
    input:
        "data/annotations/case_manifest.json",
        "data/annotations/download_complete.txt"
    output:
         "data/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/embeddings.csv"
    shell:
        "python ./src/data_preparation/0_08_combine_annotations.py -c BRCA LUAD STAD BLCA COAD THCA > {output}"


rule find_empty_txts:
    input:
       "data/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/embeddings.csv"
    output:
        "data/annotations/empty_txts.csv"
    shell:
        "python ./src/data_preparation/0_09_find_empty_txts.py -c BRCA LUAD STAD BLCA COAD THCA > {output}"

rule tesseract_conversion:
    input:
        "data/annotations/empty_txts.csv"
    output:
       "./data/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/tesseract_conversion_success.txt"
    shell:
        "./src/data_preparation/0_10_tesseract_conversion.sh 'BRCA LUAD STAD BLCA COAD THCA' > {output}"



rule final_annotation_combination:
    input:
        "data/annotations/tesseract_conversion_success.txt",
    output:
        "data/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/annotations.csv"
    shell:
        "python ./src/data_preparation/0_11_combine_annotations.py -c BRCA LUAD STAD BLCA COAD THCA > {output}"


rule create_annotation_embeddings:
    input:
        "data/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/annotations.csv"
    output:
        "results/embeddings/annotations/BRCA_LUAD_STAD_BLCA_COAD_THCA/embeddings.csv"
    shell:
        "python ./src/data_preparation/0_12_create_annotation_embeddings.py -c BRCA LUAD STAD BLCA COAD THCA > {output} 2>/dev/null"
